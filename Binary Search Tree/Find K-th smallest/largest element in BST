/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer>ans=new ArrayList<>();
        dfs(root,ans);
        return ans.get(k-1);
    }
    void dfs(TreeNode root,List<Integer>ans){
        if(root==null)return;
        dfs(root.left,ans);
        ans.add(root.val);
        dfs(root.right,ans);
    }
    // public int kthSmallest(TreeNode root, int k) {
    //     PriorityQueue<Integer>pq=new PriorityQueue<>();
    //     dfs(root,pq);
    //     int ans=0;
    //     while(pq.size()>0 && k-->0){
    //         ans=pq.poll();
    //     }
    //     return ans;
    // }
    // void dfs(TreeNode root,PriorityQueue<Integer>pq){
    //     if(root==null)return;
    //     pq.add(root.val);
    //     dfs(root.left,pq);
    //     dfs(root.right,pq);
    // }
}
