class Solution {
    public int numEnclaves(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        boolean visited[][]=new boolean[n][m];
        for(int i=0;i<m;i++){
            if(grid[0][i]==1){
                grid[0][i]=2;
                dfs(0,i,visited,grid);
            }
            if(grid[n-1][i]==1){
                grid[n-1][i]=2;
                dfs(n-1,i,visited,grid);
            }
        }
        for(int i=0;i<n;i++){
            if(grid[i][0]==1){
                grid[i][0]=2;
                dfs(i,0,visited,grid);
            }
            if(grid[i][m-1]==1){
                grid[i][m-1]=2;
                dfs(i,m-1,visited,grid);
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)ans++;
            }
        }
        return ans;
    }
    void dfs(int r,int c,boolean[][]visited,int[][]grid){
        int n=grid.length,m=grid[0].length;
        visited[r][c]=true;
        int dRow[]={-1,0,1,0};
        int dCol[]={0,1,0,-1};
        for(int i=0;i<4;i++){
            int nRow=r+dRow[i];
            int nCol=c+dCol[i];
            if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && visited[nRow][nCol]==false && grid[nRow][nCol]==1){
                grid[nRow][nCol]=2;
                dfs(nRow,nCol,visited,grid);
            }
        }
    }
}
