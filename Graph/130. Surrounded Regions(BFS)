class Pair{
    int row;int col;
    Pair(int row,int col){this.row=row;this.col=col;}
}
class Solution {
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        Queue<Pair>q=new LinkedList<>();
        for(int i=0;i<m;i++){
            if(board[0][i]=='O'){
                board[0][i]='#';
                q.add(new Pair(0,i));
            }
            if(board[n-1][i]=='O'){
                board[n-1][i]='#';
                q.add(new Pair(n-1,i));
            }
        }
        for(int i=0;i<n;i++){
            if(board[i][0]=='O'){
                board[i][0]='#';
                q.add(new Pair(i,0));
            }
            if(board[i][m-1]=='O'){
                board[i][m-1]='#';
                q.add(new Pair(i,m-1));
            }
        }

        while(q.size()>0){
            int r=q.peek().row;
            int c=q.peek().col;
            q.poll();
            if(r-1>=0 && board[r-1][c]=='O'){
                board[r-1][c]='#';
                q.add(new Pair(r-1,c));
            }
            if(r+1<n && board[r+1][c]=='O'){
                board[r+1][c]='#';
                q.add(new Pair(r+1,c));
            }
            if(c-1>=0 && board[r][c-1]=='O'){
                board[r][c-1]='#';
                q.add(new Pair(r,c-1));
            }
            if(c+1<m && board[r][c+1]=='O'){
                board[r][c+1]='#';
                q.add(new Pair(r,c+1));
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O')board[i][j]='X';
                 if(board[i][j]=='#')board[i][j]='O';
            }
        }
    }
}
