class Solution {
    public int[] findOrder(int n, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();

        for(int i=0;i<n;i++)adj.add(new ArrayList<>());

        for(int i=0;i<prerequisites.length;i++){
          int v=prerequisites[i][0];
          int u=prerequisites[i][1];
          adj.get(u).add(v);
      }
        int[]visited=new int[n];
        Stack<Integer>s=new Stack<>();
        for(int i=0;i<n;i++){
            if(hasCycle(i,s,visited,adj)==true)return new int[]{};
        }
        int[]ans=new int[n];
        int k=0;
        while(s.size()>0){
            ans[k++]=s.pop();
        }
       return ans;
    }
    boolean hasCycle(int node,Stack<Integer>s,int[]visited,ArrayList<ArrayList<Integer>>adj)
    {
        // 0 -> not visited .. 1-> visited... 2-> already visited and now again visiting
        if(visited[node]==2)return true;
        if(visited[node]==1)return false;
        visited[node]=2;
        for(int it:adj.get(node)){
            if(hasCycle(it,s,visited,adj)==true)return true;
            
        }
        visited[node]=1;
        s.push(node);
        return false;
    }
}
