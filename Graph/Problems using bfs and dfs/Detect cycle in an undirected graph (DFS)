class Solution {
    // Function to detect cycle in an undirected graph.
    // just do a dry run will get over it
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
       boolean[]visited=new boolean[V];
       for(int i=0;i<V;i++){
           if(visited[i]==false){
               if(dfs(i,-1,visited,adj)==true)return true;
           }
       }
       return false;
    }
    private boolean dfs(int node,int parent,boolean[]visited,ArrayList<ArrayList<Integer>> adj){
        visited[node]=true;
        for(int it:adj.get(node)){
            if(visited[it]==false){
                if(dfs(it,node,visited,adj)==true)return true;
            }else if(it!=parent)return true;
        }
        return false;
    }
   
}
