class Pair{
    int first;int second;
    Pair(int first,int second){this.first=first;this.second=second;};
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean visited[]=new boolean[V];
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                if(hasCycle(i,visited,adj)){
                    return true;
                }
            }
        }
        return false;
        
    }
    boolean hasCycle(int stNode,boolean[]visited,ArrayList<ArrayList<Integer>>adj){
        Queue<Pair>q=new LinkedList<>();
        q.add(new Pair(stNode,-1));
        visited[stNode]=true;
        while(q.size()>0){
            int node=q.peek().first;
            int parent=q.peek().second;
            q.poll();
            for(Integer it:adj.get(node)){
                if(visited[it]==false){
                    q.add(new Pair(it,node));
                    visited[it]=true;
                }else if(parent!=it){ // if it is already visited but not came from its parent its mean it has cycle
                    return true;
                }
            }
        }
         return false;
    }
   
}
