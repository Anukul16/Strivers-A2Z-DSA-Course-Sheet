class Pair{
    int row;
    int col;
    int time;
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
       int n=grid.length;
       int m=grid[0].length;
       int visited[][]=new int[n][m];
       Queue<Pair>q=new LinkedList<>();
       int freshOranges=0;
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
               if(grid[i][j]==2){
                   q.add(new Pair(i,j,0));
                   visited[i][j]=2;
               }
               if(grid[i][j]==1)freshOranges++;
           }
       }
       int ansTime=0;
       int dRow[]={-1,0,1,0};
       int dCol[]={0,1,0,-1};
       int cnt=0;
       while(q.size()>0){
           int r=q.peek().row;
           int c=q.peek().col;
           int t=q.peek().time;
           q.poll();
           ansTime=Math.max(ansTime,t);
           for(int i=0;i<4;i++){
               int nRow=r+dRow[i];
               int nCol=c+dCol[i];
               if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && visited[nRow][nCol]!=2 && grid[nRow][nCol]==1){
                   q.add(new Pair(nRow,nCol,t+1));
                   visited[nRow][nCol]=2;
                   cnt++;
               }
           }
       }
       if(cnt!=freshOranges)return -1;
       return ansTime;
    }
}
